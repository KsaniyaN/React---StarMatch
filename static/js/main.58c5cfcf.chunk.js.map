{"version":3,"sources":["math-utils.js","components/PlayNumber.js","components/StarsDisplay.js","components/PlayAgain.js","components/StarMatch.js","components/App.js","serviceWorker.js","index.js"],"names":["mathUtils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","colors","available","used","wrong","candidate","PlayNumber","props","react_default","a","createElement","className","style","backgroundColor","status","onClick","number","StarsDisplay","Fragment","utils","count","map","starId","key","PlayAgain","color","gameStatus","StarMatch","_useState","useState","_useState2","Object","slicedToArray","stars","setStars","_useState3","_useState4","availableNums","setAvailableNums","_useState5","_useState6","candidateNums","setCandidateNums","_useState7","_useState8","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","candidatesAreWrong","numberStatus","includes","onNumberClick","currentStatus","newCandidateNums","filter","cn","newAvailableNums","n","components_PlayAgain","components_StarsDisplay","components_PlayNumber","App","components_StarMatch","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58c5cfcf.chunk.js","sourcesContent":["// Math science\r\nconst mathUtils = {\r\n\t// Sum an array\r\n\tsum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n\t// create an array of numbers between min and max (edges included)\r\n\trange: (min, max) => Array.from({length: max - min + 1}, (_, i) => min + i),\r\n\r\n\t// pick a random number between min and max (edges included)\r\n\trandom: (min, max) => min + Math.floor(max * Math.random()),\r\n\r\n\t// Given an array of numbers and a max...\r\n\t// Pick a random sum (< max) from the set of all available sums in arr\r\n\trandomSumIn: (arr, max) => {\r\n\t\tconst sets = [[]];\r\n\t\tconst sums = [];\r\n\t\tfor (let i = 0; i < arr.length; i++) {\r\n\t\t\tfor (let j = 0, len = sets.length; j < len; j++) {\r\n\t\t\t\tconst candidateSet = sets[j].concat(arr[i]);\r\n\t\t\t\tconst candidateSum = mathUtils.sum(candidateSet);\r\n\t\t\t\tif (candidateSum <= max) {\r\n\t\t\t\t\tsets.push(candidateSet);\r\n\t\t\t\t\tsums.push(candidateSum);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn sums[mathUtils.random(0, sums.length)];\r\n\t},\r\n};\r\n\r\nexport default mathUtils;","import React from 'react';\r\n\r\nconst PlayNumber = props => (\r\n\t// closure generated onClick gives a separate number for each button\r\n\t<button\r\n\t\tclassName=\"number\"\r\n\t\tstyle={{ backgroundColor: colors[props.status] }}\r\n\t\t// onClick={() => console.log('Clicked', props.number)}\r\n\t\tonClick={() => props.onClick(props.number, props.status)}\r\n\t>\r\n\t\t{props.number}\r\n\t</button>\r\n);\r\n\r\n// Color Theme\r\nconst colors = {\r\n\tavailable: 'lightgray',\r\n\tused: 'lightgreen',\r\n\twrong: 'lightcoral',\r\n\tcandidate: 'deepskyblue',\r\n};\r\n\r\nexport default PlayNumber;\r\n\r\n","import React from 'react';\r\nimport utils from '../math-utils';\r\n\r\nconst StarsDisplay = props => (\r\n\t<>\r\n\t\t{utils.range(1, props.count).map(starId => (\r\n\t\t\t<div key={starId} className=\"star\" />\r\n\t\t))}\r\n\t</>\r\n);\r\n\r\nexport default StarsDisplay;","import React from 'react';\r\n\r\nconst PlayAgain = props => (\r\n\t<div className=\"game-done\">\r\n\t\t<div\r\n\t\t\tclassName=\"message\"\r\n\t\t\tstyle={{color: props.gameStatus === 'lost' ? 'darkred' : 'limegreen'}}>\r\n\t\t\t{props.gameStatus === 'lost' ? 'Game Over..' : 'Nice!'}\r\n\t\t</div>\r\n\t\t<button\r\n\t\t\tclassName=\"message\"\r\n\t\t\tonClick={props.onClick}>Play Again\r\n\t\t</button>\r\n\t</div>\r\n);\r\n\r\nexport default PlayAgain;","import React, {useState, useEffect} from 'react';\r\nimport utils from '../math-utils';\r\nimport PlayNumber from './PlayNumber';\r\nimport StarsDisplay from './StarsDisplay';\r\nimport PlayAgain from './PlayAgain';\r\n\r\nconst StarMatch = () => {\r\n\t// initial state\r\n\tconst [stars, setStars] = useState(utils.random(1, 9));\r\n\tconst [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n\tconst [candidateNums, setCandidateNums] = useState([]);\r\n\tconst defaultTimer = 10;\r\n\tconst [secondsLeft, setSecondsLeft] = useState(defaultTimer);\r\n\r\n\t//setTimeout\r\n\tuseEffect(() => {\r\n\t\t// console.log('Rendered...');\r\n\t\tif (secondsLeft > 0 && availableNums.length > 0) {\r\n\t\t\tconst timerId = setTimeout(() => {\r\n\t\t\t\tsetSecondsLeft(secondsLeft - 1);\r\n\t\t\t}, 1000);\r\n\t\t\treturn () => clearTimeout(timerId); // always clean up after Effects\r\n\t\t}\r\n\t\t// console.log('Done rendering');\r\n\t\t// return () => console.log('Component is going to rerender');\r\n\t});\r\n\r\n\t// check if clicked number is bigger than sum of available stars\r\n\tconst candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n\tconst gameStatus = availableNums.length === 0\r\n\t\t? 'won'\r\n\t\t: secondsLeft === 0\r\n\t\t\t? 'lost'\r\n\t\t\t: 'active';\r\n\r\n\tconst resetGame = () => {\r\n\t\tsetStars(utils.random(1, 9));\r\n\t\tsetAvailableNums(utils.range(1, 9));\r\n\t\tsetCandidateNums([]);\r\n\t\tsetSecondsLeft(defaultTimer);\r\n\t};\r\n\r\n\t// updating UI\r\n\tconst numberStatus = (number) => {\r\n\t\tif (!availableNums.includes(number)) {\r\n\t\t\treturn 'used';\r\n\t\t}\r\n\t\tif (candidateNums.includes(number)) {\r\n\t\t\treturn candidatesAreWrong ? 'wrong' : 'candidate';\r\n\t\t}\r\n\t\treturn 'available'\r\n\t};\r\n\r\n\t// currentStatus => newStatus\r\n\tconst onNumberClick = (number, currentStatus) => {\r\n\t\tif (gameStatus !== 'active' || currentStatus === 'used') {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// adding new number to candidates\r\n\t\tconst newCandidateNums =\r\n\t\t\tcurrentStatus === 'available'\r\n\t\t\t\t? candidateNums.concat(number)\r\n\t\t\t\t// keep all the candidate numbers except the number that was just clicked\r\n\t\t\t\t: candidateNums.filter(cn => cn !== number);\r\n\t\tif (utils.sum(newCandidateNums) !== stars) {\r\n\t\t\tsetCandidateNums(newCandidateNums);\r\n\t\t} else {\r\n\t\t\tconst newAvailableNums = availableNums.filter(\r\n\t\t\t\tn => !newCandidateNums.includes(n)\r\n\t\t\t);\r\n\t\t\t// redraw stars (from available)\r\n\t\t\tsetStars(utils.randomSumIn(newAvailableNums, 9));\r\n\t\t\t// reset the available stars (from what is left)\r\n\t\t\tsetAvailableNums(newAvailableNums);\r\n\t\t\t// reset the candidate nums to empty\r\n\t\t\tsetCandidateNums([]);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"game\">\r\n\t\t\t<h1>Star Match game</h1>\r\n\t\t\t<div className=\"help\">\r\n\t\t\t\tPick 1 or more numbers that sum to the number of stars\r\n\t\t\t</div>\r\n\t\t\t<div className=\"body\">\r\n\t\t\t\t<div className=\"left\">\r\n\t\t\t\t\t{gameStatus !== 'active' ? (\r\n\t\t\t\t\t\t<PlayAgain onClick={resetGame} gameStatus={gameStatus}/>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<StarsDisplay count={stars}/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"right\">\r\n\t\t\t\t\t{utils.range(1, 9).map(number => (\r\n\t\t\t\t\t\t<PlayNumber\r\n\t\t\t\t\t\t\tkey={number}\r\n\t\t\t\t\t\t\tstatus={numberStatus(number)}\r\n\t\t\t\t\t\t\tnumber={number}\r\n\t\t\t\t\t\t\tonClick={onNumberClick}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n\r\n\t\t\t<p className=\"copy\">Training project by Xenia Novosilska,<br/>\r\n\t\t\t\tbased on Pluralsight online course by Samer Buna</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default StarMatch;","import React from 'react';\nimport '../styles/App.css';\nimport StarMatch from './StarMatch'\n\nfunction App() {\n  return (\n    <StarMatch />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}